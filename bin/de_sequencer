#!/usr/bin/python

import argparse
import sys
import os
import json

# Get the path to the executable
executablePath = os.path.dirname(os.path.realpath(__file__))

# Import program modules
sys.path.append(os.path.join(executablePath, '..'))
from design_explorer import sequencer
from design_explorer import graph


def parse_command_line_arguments():
    '''Parses the command line arguments and returns them.'''

    parser = argparse.ArgumentParser(
      prog='Design Explorer Sequencer',
      description='''Generates sequence diagrams from configuration file.''')

    parser.add_argument('-tf',
                        '--tracefile',
                        required=True,
                        help='JSON trace definition file')
    parser.add_argument('-tn',
                        '--tracename',
                        required=True,
                        help='Name of trace to create sequence diagram.')
    parser.add_argument('-uf',
                        '--umlfile',
                        required=True,
                        help='output UML file')

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)
    else:
        return parser.parse_args()


def write_plantuml_file(lDiagram, sFileName):
    with open(sFileName, 'w') as oFile:
        for sString in lDiagram:
            oFile.write(sString + '\n')
    oFile.close()


def read_trace_file(commandLineArguments):
    with open(commandLineArguments.tracefile) as json_file:
        return json.load(json_file)


def build_node_list(dTracefile):
    oNodeList = graph.node_list()
    for sNode in dTracefile['node']:
        oNode = graph.node(sNode)
        if 'subNode' in dTracefile['node'][sNode]:
            oNode.subNode = dTracefile['node'][sNode]['subNode']
        oNodeList.add_node(oNode)
    return oNodeList


def build_edge_list(dTracefile):
    oEdgeList = graph.edge_list()
    for sEdge in dTracefile['edge']:
        oEdge = graph.edge()
        oEdge.source = dTracefile['edge'][sEdge]['source']
        oEdge.target = dTracefile['edge'][sEdge]['target']
        oEdge.name = sEdge
        oEdgeList.add_edge(oEdge)
    return oEdgeList


def build_trace_list(dTracefile):
    oTraceList = graph.trace_list()
    for sTrace in dTracefile['trace']:
        oTrace = graph.trace(sTrace)
        oTrace.path = dTracefile['trace'][sTrace]['path']
        oTraceList.add_trace(oTrace)
    return oTraceList


def process_trace(lTrace, oTrace, oEdgeList, oTraceList):

    for sPath in oTrace.path:
        if oEdgeList.get_edge(sPath):
            lTrace.add_to_path(oEdgeList.get_edge(sPath))
        if oTraceList.get_trace(sPath):
            process_trace(lTrace, oTraceList.get_trace(sPath), oEdgeList, oTraceList)


def validate_requested_trace_exists(oTraceList, sTraceName):

    if oTraceList.get_trace(sTraceName):
        return True
    else:
        print 'ERROR:  Could not find trace ' + sTraceName + ' in JSON file'
        exit()


def main():
    '''Main routine of the Design Explorer Sequencer program.'''

    commandLineArguments = parse_command_line_arguments()

    dTracefile = read_trace_file(commandLineArguments)

    oNodeList = build_node_list(dTracefile)
    oEdgeList = build_edge_list(dTracefile)
    oTraceList = build_trace_list(dTracefile)

    validate_requested_trace_exists(oTraceList, commandLineArguments.tracename)

    lNewTrace = graph.trace(commandLineArguments.tracename)
    process_trace(lNewTrace, oTraceList.get_trace(commandLineArguments.tracename), oEdgeList, oTraceList)
    lDiagram = sequencer.create_plantuml_sequence_diagram(lNewTrace, oNodeList)

    write_plantuml_file(lDiagram, commandLineArguments.umlfile)


if __name__ == '__main__':
    main()
